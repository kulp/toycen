"\n"                                    { c(); p(); lineno++; }
[\t\f\v\r ]+                            { c(); p(); }

"/*"                                    { skip_comment(C89_STYLE); }
"//"                                    { skip_comment(C99_STYLE); }

<*>"\\"[ \t]*"\n"                       { c(); /* acceptable backslash continuation */ }
<*>"\\"                                 { c();      return '\\'; /* unacceptable */ }

"{"                                     { c(); p(); return '{'; }
"<%"                                    { c(); p(); return '{'; }
"}"                                     { c(); p(); return '}'; }
"%>"                                    { c(); p(); return '}'; }
"["                                     { c(); p(); return '['; }
"<:"                                    { c(); p(); return '['; }
"]"                                     { c(); p(); return ']'; }
":>"                                    { c(); p(); return ']'; }
"("                                     { c(); p(); return '('; }
")"                                     { c(); p(); return ')'; }
";"                                     { c(); p(); return ';'; }
":"                                     { c(); p(); return ':'; }
"..."                                   { c(); p(); return ELLIPSIS; }
"?"                                     { c(); p(); return '?'; }
"."                                     { c(); p(); return '.'; }
"+"                                     { c(); p(); return '+'; }
"-"                                     { c(); p(); return '-'; }
"*"                                     { c(); p(); return '*'; }
"/"                                     { c(); p(); return '/'; }
"%"                                     { c(); p(); return '%'; }
"^"                                     { c(); p(); return '^'; }
"&"                                     { c(); p(); return '&'; }
"|"                                     { c(); p(); return '|'; }
"~"                                     { c(); p(); return '~'; }
"!"                                     { c(); p(); return '!'; }
"="                                     { c(); p(); return '='; }
"<"                                     { c(); p(); return '<'; }
">"                                     { c(); p(); return '>'; }

"+="                                    { c(); p(); return ADDEQ;      }
"-="                                    { c(); p(); return SUBEQ;      }
"*="                                    { c(); p(); return MULEQ;      }
"/="                                    { c(); p(); return DIVEQ;      }
"%="                                    { c(); p(); return MODEQ;      }
"^="                                    { c(); p(); return XOREQ;      }
"&="                                    { c(); p(); return ANDEQ;      }
"|="                                    { c(); p(); return OREQ;       }
"<<"                                    { c(); p(); return SL;         }
">>"                                    { c(); p(); return SR;         }
"<<="                                   { c(); p(); return SLEQ;       }
">>="                                   { c(); p(); return SREQ;       }
"=="                                    { c(); p(); return EQ;         }
"!="                                    { c(); p(); return NOTEQ;      }
"<="                                    { c(); p(); return LTEQ;       }
">="                                    { c(); p(); return GTEQ;       }
"&&"                                    { c(); p(); return ANDAND;     }
"||"                                    { c(); p(); return OROR;       }
"++"                                    { c(); p(); return PLUSPLUS;   }
"--"                                    { c(); p(); return MINUSMINUS; }
","                                     { c(); p(); return ',';        }
"->"                                    { c(); p(); return ARROW;      }

"auto"                                  { c(); p(); return AUTO;     }
"break"                                 { c(); p(); return BREAK;    }
"case"                                  { c(); p(); return CASE;     }
"char"                                  { c(); p(); return CHAR;     }
"const"                                 { c(); p(); return CONST;    }
"continue"                              { c(); p(); return CONTINUE; }
"default"                               { c(); p(); return DEFAULT;  }
"do"                                    { c(); p(); return DO;       }
"double"                                { c(); p(); return DOUBLE;   }
"else"                                  { c(); p(); return ELSE;     }
"enum"                                  { c(); p(); return ENUM;     }
"extern"                                { c(); p(); return EXTERN;   }
"float"                                 { c(); p(); return FLOAT;    }
"for"                                   { c(); p(); return FOR;      }
"goto"                                  { c(); p(); return GOTO;     }
"if"                                    { c(); p(); return IF;       }
"int"                                   { c(); p(); return INT;      }
"long"                                  { c(); p(); return LONG;     }
"register"                              { c(); p(); return REGISTER; }
"return"                                { c(); p(); return RETURN;   }
"short"                                 { c(); p(); return SHORT;    }
"signed"                                { c(); p(); return SIGNED;   }
"sizeof"                                { c(); p(); return SIZEOF;   }
"static"                                { c(); p(); return STATIC;   }
"struct"                                { c(); p(); return STRUCT;   }
"switch"                                { c(); p(); return SWITCH;   }
"typedef"                               { c(); p(); return TYPEDEF;  }
"union"                                 { c(); p(); return UNION;    }
"unsigned"                              { c(); p(); return UNSIGNED; }
"void"                                  { c(); p(); return VOID;     }
"volatile"                              { c(); p(); return VOLATILE; }
"while"                                 { c(); p(); return WHILE;    }

{id}                                    { c();      return check_identifier(yytext); }

"0"[xX][0-9a-fA-F]+{intsuffix}?         { c(); p(); return INTEGER;   }
"0"[0-7]+{intsuffix}?                   { c(); p(); return INTEGER;   }
[0-9]+{intsuffix}?                      { c(); p(); return INTEGER;   }

{fracconst}{exppart}?{floatsuffix}?     { c(); p(); return FLOATING;  }
[0-9]+{exppart}{floatsuffix}?           { c(); p(); return FLOATING;  }

"'"{chartext}*"'"                       { c(); p(); yylval.chr = yytext[0]; return CHARACTER; }
"L'"{chartext}*"'"                      { c(); p(); yylval.chr = yytext[0]; return CHARACTER; }

"\""{stringtext}*"\""                   { c(); p(); yylval.str = yytext; return STRING; }
"L\""{stringtext}*"\""                  { c(); p(); yylval.str = yytext; return STRING; }

.                                       { c(); fprintf(stderr, "line %d: unexpected character `%c'\n", lineno, yytext[0]); /* vi:set ts=4 sw=4 et syntax=lexrules: */ }
