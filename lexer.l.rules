"\n"                                    { c(); whitespace(); lineno++; }
[\t\f\v\r ]+                            { c(); whitespace(); }

"/*"                                    { skip_comment(C89_STYLE); }
"//"                                    { skip_comment(C99_STYLE); }

<*>"\\"[ \t]*"\n"                       { c(); /* acceptable backslash continuation */ }
<*>"\\"                                 { c(); return '\\'; /* unacceptable */ }

"{"                                     { c(); return '{'; }
"<%"                                    { c(); return '{'; }
"}"                                     { c(); return '}'; }
"%>"                                    { c(); return '}'; }
"["                                     { c(); return '['; }
"<:"                                    { c(); return '['; }
"]"                                     { c(); return ']'; }
":>"                                    { c(); return ']'; }
"("                                     { c(); return '('; }
")"                                     { c(); return ')'; }
";"                                     { c(); return ';'; }
":"                                     { c(); return ':'; }
"..."                                   { c(); return ELLIPSIS; }
"?"                                     { c(); return '?'; }
"."                                     { c(); return '.'; }
"+"                                     { c(); return '+'; }
"-"                                     { c(); return '-'; }
"*"                                     { c(); return '*'; }
"/"                                     { c(); return '/'; }
"%"                                     { c(); return '%'; }
"^"                                     { c(); return '^'; }
"&"                                     { c(); return '&'; }
"|"                                     { c(); return '|'; }
"~"                                     { c(); return '~'; }
"!"                                     { c(); return '!'; }
"="                                     { c(); return '='; }
"<"                                     { c(); return '<'; }
">"                                     { c(); return '>'; }

"+="                                    { c(); return ADDEQ;      } 
"-="                                    { c(); return SUBEQ;      } 
"*="                                    { c(); return MULEQ;      } 
"/="                                    { c(); return DIVEQ;      } 
"%="                                    { c(); return MODEQ;      } 
"^="                                    { c(); return XOREQ;      } 
"&="                                    { c(); return ANDEQ;      } 
"|="                                    { c(); return OREQ;       } 
"<<"                                    { c(); return SL;         } 
">>"                                    { c(); return SR;         } 
"<<="                                   { c(); return SLEQ;       } 
">>="                                   { c(); return SREQ;       } 
"=="                                    { c(); return EQ;         } 
"!="                                    { c(); return NOTEQ;      } 
"<="                                    { c(); return LTEQ;       } 
">="                                    { c(); return GTEQ;       } 
"&&"                                    { c(); return ANDAND;     } 
"||"                                    { c(); return OROR;       } 
"++"                                    { c(); return PLUSPLUS;   } 
"--"                                    { c(); return MINUSMINUS; } 
","                                     { c(); return ',';        } 
"->"                                    { c(); return ARROW;      } 

"auto"                                  { c(); return AUTO;     } 
"break"                                 { c(); return BREAK;    } 
"case"                                  { c(); return CASE;     } 
"char"                                  { c(); return CHAR;     } 
"const"                                 { c(); return CONST;    } 
"continue"                              { c(); return CONTINUE; } 
"default"                               { c(); return DEFAULT;  } 
"do"                                    { c(); return DO;       } 
"double"                                { c(); return DOUBLE;   } 
"else"                                  { c(); return ELSE;     } 
"enum"                                  { c(); return ENUM;     } 
"extern"                                { c(); return EXTERN;   } 
"float"                                 { c(); return FLOAT;    } 
"for"                                   { c(); return FOR;      } 
"goto"                                  { c(); return GOTO;     } 
"if"                                    { c(); return IF;       } 
"int"                                   { c(); return INT;      } 
"long"                                  { c(); return LONG;     } 
"register"                              { c(); return REGISTER; } 
"return"                                { c(); return RETURN;   } 
"short"                                 { c(); return SHORT;    } 
"signed"                                { c(); return SIGNED;   } 
"sizeof"                                { c(); return SIZEOF;   } 
"static"                                { c(); return STATIC;   } 
"struct"                                { c(); return STRUCT;   } 
"switch"                                { c(); return SWITCH;   } 
"typedef"                               { c(); return TYPEDEF;  } 
"union"                                 { c(); return UNION;    } 
"unsigned"                              { c(); return UNSIGNED; } 
"void"                                  { c(); return VOID;     } 
"volatile"                              { c(); return VOLATILE; } 
"while"                                 { c(); return WHILE;    } 

{id}                                    { c(); return check_identifier(yytext); }

"0"[xX][0-9a-fA-F]+{intsuffix}?         { c(); return INTEGER;   } 
"0"[0-7]+{intsuffix}?                   { c(); return INTEGER;   } 
[0-9]+{intsuffix}?                      { c(); return INTEGER;   } 

{fracconst}{exppart}?{floatsuffix}?     { c(); return FLOATING;  } 
[0-9]+{exppart}{floatsuffix}?           { c(); return FLOATING;  } 

"'"{chartext}*"'"                       { c(); return CHARACTER; } 
"L'"{chartext}*"'"                      { c(); return CHARACTER; } 

"\""{stringtext}*"\""                   { c(); return STRING;    } 
"L\""{stringtext}*"\""                  { c(); return STRING;    } 

.                                       { c(); fprintf(stderr, "line %d: unexpected character `%c'\n", lineno, yytext[0]); /* vi:set ts=4 sw=4 et syntax=lexrules: */ }
