int switch_to_input_file(const char *s)
{
	yyin = fopen(s, "r");

	if (!yyin) {
		perror("fopen");
		return -1;
	}

	yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));

	BEGIN(INITIAL);

	return 0;
}

int column;

static void p()
{
#if PREPROCESSOR_LEXING
    output(yytext);
#endif
}

static void c()
{
    for (int i = 0; yytext[i]; i++)
        if (yytext[i] == '\n')
            column = 0;
        else if (yytext[i] == '\t')
            column += TAB_WIDTH - (column % TAB_WIDTH);
        else
            column++;
}

/*
 * We use this routine instead a lex pattern because we don't need
 * to save the matched comment in the `yytext' buffer.
 */
static void skip_comment(comment_t style)
{
    int c1, c2;

	c1 = input();
	if (style == C89_STYLE) {
		c2 = input();

		while (c2 != EOF && !(c1 == '*' && c2 == '/')) {
			if (c1 == '\n')
				++lineno;
			c1 = c2;
			c2 = input();
		}
	} else {
		while (c2 != EOF && !(c1 == '\n'))
			c1 = input();
		if (c1 == '\n')
			++lineno;
	}
}

static int check_identifier(char *s)
{
    yylval.str = s;
#ifdef PREPROCESSOR_LEXING
    char *val = get_define(s);
    output(val ? val : s);
#else
    if (hash_table_get(types_hash, s))
        return TYPEDEF_NAME;
#endif

    return IDENTIFIER;
}

void lexer_setup()
{
    _debug(2, "%s", __func__);

    /// @todo scope type definitions properly
    if (!types_hash)
        hash_table_create(&types_hash, 0);
}

void lexer_teardown()
{
    _debug(2, "%s", __func__);
    hash_table_destroy(types_hash);
    types_hash = NULL;
}

/// @todo scope properly
void add_typename(scope_t *scope, const char *type)
{
    hash_table_put(types_hash, type, (void*)1);
    scope = scope; // to avoid uused warning for now
}

/* vi:set ts=4 sw=4 et syntax=c.doxygen: */
