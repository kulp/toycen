^#  BEGIN(drct);

<drct,argn,keyw,valu,undw,arg1,arg0,incl>[ \t]+ /* eat spaces */

<drct>define    { BEGIN(keyw); if (0) return K_DEFINE ; }
<drct>undef     { BEGIN(undw); if (0) return K_UNDEF  ; }
<drct>if        { BEGIN(argn); if (0) return K_IF     ; }
<drct>ifdef     { BEGIN(arg1); if (0) return K_IFDEF  ; }
<drct>elif      { BEGIN(argn); if (0) return K_ELIF   ; }
<drct>else      { BEGIN(arg0); if (0) return K_ELSE   ; }
<drct>endif     { BEGIN(arg0); if (0) return K_ENDIF  ; }
<drct>include   { BEGIN(incl); if (0) return K_INCLUDE; }

<valu>[^\n]+/\n   {
    strncpy(defval + valpos, yytext, yyleng);
    /// @todo stop dealing with continued lines explicitly here
    int cont = (yytext[yyleng - 1] == '\\');
    int len = cont ? yyleng - 1 : yyleng;
    defval[(valpos += len)] = 0;
    if (!cont) {
        BEGIN(INITIAL);
        add_define(defkey, defval);
        defkey[0] = defval[0] = keypos = valpos = 0;
        /// @todo return here
    }
}

<keyi>{hspace}  { BEGIN(valu); }

<keyi,undi>\n        {
    switch (YYSTATE) {
    case keyi: add_define(defkey, DEFAULT_DEFINITION); break;
    case undi: del_define(defkey);                     break;
    default: printf("invalid state %d\n", YYSTATE); /** @todo error */ break;
    }

    defkey[0] = defval[0] = keypos = valpos = 0;
    BEGIN(INITIAL);
}

<keyw,keyi,undw,undi>{id}      { /** @todo function-like macros */
    /// @todo trap and error on non-identifier macro names
    switch (YYSTATE) {
    case keyw: case keyi: BEGIN(keyi); break;
    case undw: case undi: BEGIN(undi); break;
    }
    strncpy(defkey + keypos, yytext, yyleng);
    defkey[(keypos += yyleng)] = 0;
}

<drct>.         { printf("unknown directive\n"); return -1; /* vi:set ts=4 sw=4 et syntax=lexrules: */ }
